
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

# Text to speech
tts:
  - platform: google_translate

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

light:
  - platform: mqtt
    name: "Main Lights ESP"
    state_topic: "esp32/main_lights/status"
    command_topic: "esp32/main_lights/switch"
    payload_off: "OFF"
    brightness_state_topic: 'esp32/main_lights/brightness'
    brightness_command_topic: 'esp32/main_lights/brightness/set'
    on_command_type: 'brightness'
  - platform: mqtt
    name: "Bed Lights ESP"
    state_topic: "esp32/bed_lights/status"
    command_topic: "esp32/bed_lights/switch"
    payload_off: "OFF"
    brightness_state_topic: 'esp32/bed_lights/brightness'
    brightness_command_topic: 'esp32/bed_lights/brightness/set'
    on_command_type: 'brightness'

sensor:
  - platform: mqtt
    state_topic: "van/solar/power"
    name: 'Solar Power'
    unit_of_measurement: 'W'
    value_template: '{{ value_json.power }}'
  - platform: mqtt
    state_topic: "van/solar/power"
    name: 'Power Generated Today'
    unit_of_measurement: 'Ah'
    value_template: '{{ value_json.power_today }}'
  - platform: mqtt
    state_topic: "van/propane"
    name: 'Propane Level'
    unit_of_measurement: '%'
    value_template: '{{ value_json.propane_pct }}'
  - platform: mqtt
    state_topic: "van/propane"
    name: 'Propane Sensor Quality'
    value_template: '{{ value_json.propane_qual }}'
  - platform: mqtt
    state_topic: "van/propane"
    name: 'Propane Sensor Battery'
    unit_of_measurement: '%'
    icon: mdi:battery-50
    value_template: '{{ value_json.propane_bat }}'
  - platform: mqtt
    state_topic: "van/propane"
    name: 'Propane Sensor Temperature'
    unit_of_measurement: '°C'
    value_template: '{{ value_json.propane_temp }}'
  - platform: template
    sensors:
      x_angle:
        friendly_name: "X Angle"
        unit_of_measurement: "°"
        value_template: '{{ ((asin((states("sensor.mpu6050_accel_x") | float) / 9.81) * 180 / pi) - 2.8) * -1 }}'
      y_angle:
        friendly_name: "Y Angle"
        unit_of_measurement: "°" 
        value_template: '{{ ((asin((states("sensor.mpu6050_accel_y") | float) / 9.81) * 180 / pi) + 0.3) * 1}}'
  - platform: filter
    name: "Filtered X Angle"
    entity_id: sensor.x_angle
    filters:
      - filter: lowpass
        time_constant: 5
        precision: 1
  - platform: filter
    name: "Filtered Y Angle"
    entity_id: sensor.y_angle
    filters:
      - filter: lowpass
        time_constant: 5
        precision: 1
